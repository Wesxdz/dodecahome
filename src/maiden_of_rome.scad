include <dodecahome_config.scad>
include <penta_maiden.scad>

C0 = 0.809016994374947424102293417183;
C1 = 1.30901699437494742410229341718;

points = [
    [ 0.0,  0.5,   C1],
    [ 0.0,  0.5,  -C1],
    [ 0.0, -0.5,   C1],
    [ 0.0, -0.5,  -C1],
    [  C1,  0.0,  0.5],
    [  C1,  0.0, -0.5],
    [ -C1,  0.0,  0.5],
    [ -C1,  0.0, -0.5],
    [ 0.5,   C1,  0.0],
    [ 0.5,  -C1,  0.0],
    [-0.5,   C1,  0.0],
    [-0.5,  -C1,  0.0],
    [  C0,   C0,   C0],
    [  C0,   C0,  -C0],
    [  C0,  -C0,   C0],
    [  C0,  -C0,  -C0],
    [ -C0,   C0,   C0],
    [ -C0,   C0,  -C0],
    [ -C0,  -C0,   C0],
    [ -C0,  -C0,  -C0]
];

faces = [
    [ 12,  4, 14,  2,  0],
    [ 16, 10,  8, 12,  0],
    [  2, 18,  6, 16,  0],
    [ 17, 10, 16,  6,  7],
    [ 19,  3,  1, 17,  7],
    [  6, 18, 11, 19,  7],
    [ 15,  3, 19, 11,  9],
    [ 14,  4,  5, 15,  9],
    [ 11, 18,  2, 14,  9],
    [  8, 10, 17,  1, 13],
    [  5,  4, 12,  8, 13],
    [  1,  3, 15,  5, 13]
];

normals = [
[20.905158285110733, -180.00000500895632, 0.0],
[20.905158285110733, -0.0, -0.0],
[-20.905158285110733, -180.00000500895632, 0.0],
[-20.905158285110733, -0.0, -0.0],
[0.0, -110.90515566694702, 0.0],
[0.0, -69.09484251182015, -0.0],
[0.0, 110.90515566694702, 0.0],
[0.0, 69.09484251182015, 0.0],
[69.09483568163097, -90.00000250447816, 0.0],
[-69.09483568163097, -90.00000250447816, 0.0],
[69.09483568163097, 90.00000250447816, 0.0],
[-69.09483568163097, 90.00000250447816, 0.0],
[35.26438962818089, -135.00000034162267, 0.0],
[35.26438962818089, -45.00000125223908, 0.0], // error
[-35.26438962818089, -135.00000034162267, 0.0],
[-35.26438962818089, -45.00000125223908, -0.0],
[35.26438962818089, 135.00000034162267, 0.0],
[35.26438962818089, 45.00000125223908, 0.0],
[-35.26438962818089, 135.00000034162267, 0.0],
[-35.26438962818089, 45.00000125223908, 0.0],
];

connector_rots = 
[0, 0, 0, -60, 0,
-26, 0, 30, 60, 0,
60, 0, 0, tetra_a, 0,
18, 0, -tetra_a, 0, -magic_angle];

on_bottom =
[0, 1, 0, 1, 0,
1, 0, 1, 1, 0,
1, 0, 0, 1, 0,
1, 0, 1, 0, 1];

symmetrical =
[3, 2, 1, 0, 7,
6, 5, 4, 11, 10,
9, 8, 19, 18, 17,
16, 15, 14, 13, 12];

mothership_notch =
[
[0, 0, 1],
[1, 1, 1],
[0, 0, 0],
[1, 1, 1],
[0, 0, 0],

[0, 1, 0],
[1, 1, 1],
[1, 1, 1],
[1, 1, 1],
[0, 0, 0],

[1, 1, 1],
[0, 1, 0],
[0, 0, 1],
[1, 1, 1],
[0, 0, 0],

[1, 0, 0],
[1, 1, 1],
[1, 1, 1],
[0, 0, 1],
[1, 1, 1],
];

//color([0.8, 0.2, 0.2, 0.4])
//rotate([-magic_angle, 0, 0])
//scale(20) polyhedron(points, faces);

// For each point,
// We need an index of the three faces that intersect it
// This can be gathered from a set function in Python

module ConnectorsSet()
{
    rotate([-magic_angle, 0, 0])
    for (p = [0:len(points)-1])
    { 
        if (on_bottom[p])
        {
        translate(points[p]*interior_scale)
        rotate(normals[p])
        rotate([0, 0, connector_rots[p]])
        color([0.8, 0.8, 0.8, 0.6])
        RomanNotch([1, 1, 1]);
        } else
        {
            
            translate(points[p]*interior_scale)
            rotate(normals[symmetrical[p]])
            mirror([0, 0, 1])
            rotate([0, 0, 180]) 
            rotate([0, 0, connector_rots[symmetrical[p]]])
            color([0.8, 0.8, 0.8, 0.6])
            RomanNotch([1, 1, 1]);
        }
    }
}

module ConnectorComposite(show_debug=false)
{
    ConnectorsSet();
    //mirror([0, 0, 1]) rotate([0, 0, 180]) ConnectorsSet();
    if (show_debug)
    {
        // Normals debug render
        rotate([-magic_angle, 0, 0])
        for (p = [0:len(points)-1])
        {
            $fn=32;
            color([1, 0.5, 1.0, 0.5])
            hull()
            {
            translate(points[p]*20) sphere(.3);
            translate(points[p]*24) sphere(.1);
            }
        }
    }
}

rotate([0, 0, 120]) ConnectorComposite();